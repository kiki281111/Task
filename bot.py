from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes

from credentials import ChatGPT_TOKEN, TG_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'recipes': '–ü–æ–¥–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤ üçù',
        'trainer': '–°–ª–æ–≤–∞—Ä–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä üìñ'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })


dialog = Dialog()
dialog.mode = None
dialog.count = 0


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (task 1)
    """
    if dialog.mode == "gpt":
        await gpt_dialog(update, context)
    elif dialog.mode == "talk":
        await talk_dialog(update, context)
    elif dialog.mode == "quiz":
        await quiz_dialog(update, context)
    elif dialog.mode == "recipes":
        await recipes_dialog(update, context)
    else:
        text = update.message.text
        await send_text(update, context, text)


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 2
    """
    promt = load_prompt("random")
    message = load_message("random")
    await send_image(update, context, "random")
    message = await send_text(update, context, message)
    answer = await chat_gpt.send_question(promt, "")
    await message.edit_text(answer)


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 3
    """
    text = update.message.text
    message = await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 3
    """
    dialog.mode = 'gpt'
    promt = load_prompt("gpt")
    message = load_message("gpt")
    chat_gpt.set_prompt(promt)
    await send_image(update, context, "gpt")
    await send_text(update, context, message)



async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 4
    """
    dialog.mode = 'talk'
    message = load_message("talk")
    await send_image(update, context, "talk")
    await send_text_buttons(update, context, message, {
        "talk_cobain": "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω",
        "talk_queen": "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II",
        "talk_tolkien": "–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω",
        "talk_nietzsche": "–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ",
        "talk_hawking": "–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥"
    })


async def talk_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 4
    """
    query = update.callback_query.data
    await update.callback_query.answer()
    promt = load_prompt(query)
    message = load_message("talk2")
    chat_gpt.set_prompt(promt)
    await send_image(update, context, query)
    await send_text(update, context, message)

async def talk_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 4
    """
    text = update.message.text
    message = await send_text(update, context, "–î—É–º–∞—é...")
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 5
    """
    dialog.mode = 'quiz'
    message = load_message("quiz")
    await send_image(update, context, "quiz")
    await send_text_buttons(update, context, message, {
        "quiz_prog": "–í–æ–ø—Ä–æ—Å—ã –æ Python",
        "quiz_math": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏",
        "quiz_biology": "–ë–∏–æ–ª–æ–≥–∏—è",
        "quiz_more": "–í–æ–ø—Ä–æ—Å –Ω–∞ —Ç—É –∂–µ —Ç–µ–º—É",
    })

async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 5
    """
    query = update.callback_query.data
    await update.callback_query.answer()
    promt = load_prompt("quiz")
    chat_gpt.set_prompt(promt)
    message = await send_text(update, context,"–ì–æ—Ç–æ–≤–ª—é –≤–æ–ø—Ä–æ—Å")
    answer = await chat_gpt.add_message(query)
    await message.edit_text(answer)

async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 5
    """
    text = update.message.text
    message = await send_text(update, context, "–î—É–º–∞—é...")
    answer = await chat_gpt.add_message(text)
    if answer == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!":
        dialog.count += 1
    await message.edit_text(f"{answer}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {dialog.count}")

async def recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 6.1
    """
    dialog.mode = 'recipes'
    message = load_message("recipes")
    await send_image(update, context, "recipes")
    await send_text(update, context, message)
async def recipes_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 6.1
    """
    text = update.message.text
    promt = load_prompt("recipes")
    message = await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    answer = await chat_gpt.send_question(promt, text)
    await message.edit_text(answer)

async def trainer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 6.2
    """
    dialog.mode = 'trainer'
    message = load_message("trainer")
    await send_image(update, context, "trainer")
    await send_text_buttons(update, context, message, {
        "trainer_new": "–•–æ—á—É —Å–ª–æ–≤–æ",
    })

async def trainer_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Task 6.2
    """
    query = update.callback_query.data
    await update.callback_query.answer()
    promt = load_prompt(query)
    message = await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ —Å–ª–æ–≤–æ–º...")
    answer = await chat_gpt.send_question(promt, "")
    await message.edit_text(answer)


chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(TG_TOKEN).build()
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random_fact))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('recipes', recipes))
app.add_handler(CommandHandler('trainer', trainer))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern='^quiz_.*'))
app.add_handler(CallbackQueryHandler(trainer_button, pattern='^trainer_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
